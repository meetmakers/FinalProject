create index file
install necessary files

Folders to be created 
1. Controllers
2. Models
3. routes
4. views


1. Set Up views
app.set('view engine','ejs')
path module is required
app.set('views', path.resolve('/views'))

Create Folder Views 
1. home.ejs

Create Folder inside views
Called Partials which are small components
Used for common code
Code to use is <%- include('./partials/head') %>

when you install nodemon npm i nodemon -D
it will come in dev-dependcies -> which leads to not install nodemon files when you host it
in scripts inside dev we write "nodemon index.js"


Use - Bootstrap we take out the navbar, create a different file for it.

Make User Schema 
[
  FullName type:String required:true,
  Email type:String required:true
  salt type:String 
  password type:String required:true
  profileImageURL: type:String, default:"/images/default.png
  timestamps:true
  role:enum:["USER","ADMIN"]
]
1. We use enum -> enum is used to make sure that only restricted values are used
[" USER" or "ADMIN"]



To hash a password for the User
we use .pre function (acts like a middleware)
const {createHmac, randomBytes} = require("crypto")

crypto built-in package
createHmac used to hash the password

userSchema.pre("save",function(next){
  const user = this; // returns the user detaisl

  if(!user.isModified("password")) return; // Checks if the password is modified

  const salt = randomBytes(16) //Random String
  // We make a salt for the user
  // sha256 is the algorithm
  // then you have to pass a key generated by randomSalt
  // .update() // what to update -> user's password
  // .digest() // digest it into a hex form
  const hashPassword = createHmac('sha256',salt)
    .update(user.password)
    .digest("hex");

    // we set the values
    this.salt = salt 
    this.password = hashedPassword
    next()

  
  // First Argument stands for algorithm
  // Second Argument stands for secret key to be used
  // then .update(where you want to update)
  // then .digest(give it in hex form)
  // this means users object
})

Connect MongoDb
mongoose.connect('mongdb://localhost:27017/Name_Of_Your_Database).then(()=>console.log("MongoDB Connected"))
check for mongoDB Schema

WE make a router

user.js
const router = Router()
// Try to put the code in controller part

1. First we render all the basic pages (Basically creating a static route)
We use router.get("Give the url",(req,res)=>{
  return response.render(Name of Your Ejs File)
})


Create a  function 
2. Make the post routes 
From the front-end we will get the user name, email and password
Need to import User Model
Now make the function async await 

Get the details from the user
Await to create User values
Exports the router
Import the router in the index.js file

Note:
Do not forget to
1.bring the middleware for forms app.use(express.urlencoded({extended:false}))
2.Import the router in the index.js file



In the forms it is important to provide name for each input field
form action(the path you gave for router post) is necessary where method should be post

router.post('signin')

We take user email and password 

We create a virtual function in mongoose model.js


userSchema.static('matchPassword',async function(email,password){
  const user = await this.findOne({email})
  // if(!user) return false;

  if(!user) throw new Error('user Not Found')
  // If user is not found

  const salt = user.salt;
  const hashedPassword = user.password;
  // Through user object we get the salt and password

  const userProvidedHash = createHmac("sha256",salt)
  .update(password) // We try to hash the password of the user
  .digest("hex")

  if(hashedPassword !== userProvidedHash) throw new Error("Incorrect Password")

  // return hashedPassword == userProvidedHash
  return {...user,password:undefined,salt:undefined}
  // We should not return the password and salt
  // we should send the user object with password and salt undefined
})



Setting Up User Authentication

Install JsonWebToken

Create Service Folder
Authentication js
Import JWT 
Make a superkey (Keep It hidden)


create function for Token Creation(user){}

payload must include {} -> _id: user._id, email:user.email, profileImageURL: user.,role: user.role


Create token 
JWT.sign(payload,secret)
return token

Generates the user tokens and return it

create function for Token Validation(token){
  const payload = JWT.verify(token,secret);
  return payload;
}

export the functions

change the matchPassword function in user.modules



where you create token for the user
and return token


Now in the SignIn router we set the cookie for the user named token and redirect it.

Catch: If you enter wrong password, app will crash needs to be handled by try and Catch

In try portion you try to generate and set token for the user
or else in catch portion 
  you render to signin page and send an Error

  response.render("Welcome",{error: ""})

You can make changes in navbar.ejs
where <%= if(locals.error){
  Error
}



Create middleware for authentication to check if the user exists or not
# Install Cookie-Parser

Create function for checkingCookie(cookieName){
  # Requires Cookie-Parser
  return(response,request,next){
    const tokenCookieValue = request.cookies[cookieName]
    if(!tokenCookieValue){
      return next();
    }
    try{
      const userPayload = validateToken(tokenCookieValue)
      request.user = userPayload;
    }catch(){ }
    return next();
  }

}

Export it 

Import cookieParser in index.js
app.use(cookieParser())
app.use(checkForAuthenticationCookie("token"))
Pass the name for your token


in app.get("/",(request,response)=>{
  response.render("home",{
    user:req.user
    #Pass the user object
  })
})

# Try to check in the frontend what object is being passed
<%= Json.stringify(user) %>

# We have to use this in navbar
# Make changes in the user
Put an If-else condition

if(locals.user){
  # If the user is logged in
  # We will show the name
  # Add Blog
}else{
  # Create Account
  # Sign-In
}

# Make a logout request

router.get('/logout',(request,response)=>{
  # Clear the cookie
  # Redirect them to the home page
  # Make changes in the log out
})